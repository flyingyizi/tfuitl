package batch

import (
	"reflect"
	"testing"
)

func Test_loadData(t *testing.T) {
	//	x, y := loadData("ex1data1.txt")

	//	fmt.Println("xlen:", len(x), x)
	//	fmt.Println("ylen:", len(y), y)

	type args struct {
		filename string
	}
	tests := []struct {
		name     string
		args     args
		wantOutx [][]float64
		wantOuty []float64
	}{
		// TODO: Add test cases.
		{
			name:     "ex1data1.txt",
			args:     args{filename: "ex1data1.txt"},
			wantOutx: [][]float64{{6.1101, 5.5277, 8.5186, 7.0032, 5.8598, 8.3829, 7.4764, 8.5781, 6.4862, 5.0546, 5.7107, 14.164, 5.734, 8.4084, 5.6407, 5.3794, 6.3654, 5.1301, 6.4296, 7.0708, 6.1891, 20.27, 5.4901, 6.3261, 5.5649, 18.945, 12.828, 10.957, 13.176, 22.203, 5.2524, 6.5894, 9.2482, 5.8918, 8.2111, 7.9334, 8.0959, 5.6063, 12.836, 6.3534, 5.4069, 6.8825, 11.708, 5.7737, 7.8247, 7.0931, 5.0702, 5.8014, 11.7, 5.5416, 7.5402, 5.3077, 7.4239, 7.6031, 6.3328, 6.3589, 6.2742, 5.6397, 9.3102, 9.4536, 8.8254, 5.1793, 21.279, 14.908, 18.959, 7.2182, 8.2951, 10.236, 5.4994, 20.341, 10.136, 7.3345, 6.0062, 7.2259, 5.0269, 6.5479, 7.5386, 5.0365, 10.274, 5.1077, 5.7292, 5.1884, 6.3557, 9.7687, 6.5159, 8.5172, 9.1802, 6.002, 5.5204, 5.0594, 5.7077, 7.6366, 5.8707, 5.3054, 8.2934, 13.394, 5.4369}},
			wantOuty: []float64{17.592, 9.1302, 13.662, 11.854, 6.8233, 11.886, 4.3483, 12, 6.5987, 3.8166, 3.2522, 15.505, 3.1551, 7.2258, 0.71618, 3.5129, 5.3048, 0.56077, 3.6518, 5.3893, 3.1386, 21.767, 4.263, 5.1875, 3.0825, 22.638, 13.501, 7.0467, 14.692, 24.147, -1.22, 5.9966, 12.134, 1.8495, 6.5426, 4.5623, 4.1164, 3.3928, 10.117, 5.4974, 0.55657, 3.9115, 5.3854, 2.4406, 6.7318, 1.0463, 5.1337, 1.844, 8.0043, 1.0179, 6.7504, 1.8396, 4.2885, 4.9981, 1.4233, -1.4211, 2.4756, 4.6042, 3.9624, 5.4141, 5.1694, -0.74279, 17.929, 12.054, 17.054, 4.8852, 5.7442, 7.7754, 1.0173, 20.992, 6.6799, 4.0259, 1.2784, 3.3411, -2.6807, 0.29678, 3.8845, 5.7014, 6.7526, 2.0576, 0.47953, 0.20421, 0.67861, 7.5435, 5.3436, 4.2415, 6.7981, 0.92695, 0.152, 2.8214, 1.8451, 4.2959, 7.2029, 1.9869, 0.14454, 9.0551, 0.61705},
		},
		// {
		// 	name:     "2",
		// 	args:     args{filename: "ex1data1.txt"},
		// 	wantOutx: [][]float64{},
		// 	wantOuty: []float64{},
		// },
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotOutx, gotOuty := loadData(tt.args.filename)
			if !reflect.DeepEqual(gotOutx, tt.wantOutx) {
				t.Errorf("loadData() gotOutx = %v, want %v", gotOutx, tt.wantOutx)
			}
			if !reflect.DeepEqual(gotOuty, tt.wantOuty) {
				t.Errorf("loadData() gotOuty = %v, want %v", gotOuty, tt.wantOuty)
			}
		})
	}
}

func TestCsvToDense(t *testing.T) {
	type args struct {
		filename string
	}
	tests := []struct {
		name string
		args args
		//wantX *mat.Dense
		wantX [][]float64
	}{
		// TODO: Add test cases.
		{
			name: "ex1data2.txt",
			args: args{filename: "ex1data2.txt"},
			wantX: [][]float64{
				{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
					1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},

				{2104, 1600, 2400, 1416, 3000, 1985, 1534, 1427, 1380, 1494,
					1940, 2000, 1890, 4478, 1268, 2300, 1320, 1236, 2609, 3031,
					1767, 1888, 1604, 1962, 3890, 1100, 1458, 2526, 2200, 2637,
					1839, 1000, 2040, 3137, 1811, 1437, 1239, 2132, 4215, 2162, 1664, 2238, 2567, 1200, 852, 1852, 1203},

				{3, 3, 3, 2, 4, 4, 3, 3, 3, 3,
					4, 3, 3, 5, 3, 4, 2, 3, 4, 4,
					3, 2, 3, 4, 3, 3, 3, 3, 3, 3,
					2, 1, 4, 3, 4, 3, 3, 4, 4, 4,
					2, 3, 4, 3, 2, 4, 3},

				{399900, 329900, 369000, 232000, 539900, 299900, 314900, 198999, 212000, 242500,
					239999, 347000, 329999, 699900, 259900, 449900, 299900, 199900, 499998, 599000,
					252900, 255000, 242900, 259900, 573900, 249900, 464500, 469000, 475000, 299900,
					349900, 169900, 314900, 579900, 285900, 249900, 229900, 345000, 549000, 287000,
					368500, 329900, 314000, 299000, 179900, 299900, 239500},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			_, gotX := CsvToDense(tt.args.filename)
			if !reflect.DeepEqual(gotX, tt.wantX) {
				t.Errorf("CsvToDense() gotX = %v, want %v", gotX, tt.wantX)
			}
		})
	}

}
